generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())        
  firebaseUid   String    @unique                     // Firebase UID (all users)
  supabaseUid   String?   @unique                     // If present, user is ARTISAN
  firstName     String?
  lastName      String?
  email         String?   @db.VarChar(255)
  phone         String?   @db.VarChar(20)
  address       String?
  role          UserRole  @default(CUSTOMER)          // CUSTOMER by default, ARTISAN if supabaseUid exists
  totalOrders   Int       @default(0)                 
  pendingOrders Int       @default(0)                 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  orders        Order[] 
  queries       Query[]
  customerChats Chat[]    @relation("CustomerChats")
  artisanChats  Chat[]    @relation("ArtisanChats")
  messages      Message[]

  @@map("users")
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  status     OrderStatus @default(PENDING)
  amount     Float?
  createdAt  DateTime    @default(now())

  @@map("orders")
}

model Query {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  subject    String
  message    String?
  resolved   Boolean   @default(false)
  createdAt  DateTime  @default(now())

  @@map("queries")
}

// Chat between a customer and an artisan
model Chat {
  id            String    @id @default(cuid())
  customerId    String
  customer      User      @relation("CustomerChats", fields: [customerId], references: [id])
  artisanId     String
  artisan       User      @relation("ArtisanChats", fields: [artisanId], references: [id])
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  content   String
  createdAt DateTime @default(now())

  @@map("messages")
}

enum UserRole {
  CUSTOMER
  ARTISAN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
